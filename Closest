package com.info.learning;

public class ClosestSumtoZero {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Integer array[]={-40,-5,1,3,6,7,8,20};
		
		int minimumDiff=Math.abs(array[0]+array[1]-0);
		int pair1stIndex=0;
	    int pair2ndIndex=1;
		for (int i=0;i<array.length;i++) {
			
			for (int j=i+1;j<array.length;j++) {
				
				int tempDiff=Math.abs(array[i]+array[j]-0);
				
				System.out.println(tempDiff);
				if(tempDiff< minimumDiff)
	            {
	                pair1stIndex=i;
	                pair2ndIndex=j;
	                minimumDiff=tempDiff;
	            }
				
				
				
			}
			
		}
		
		 System.out.println(" The pair whose sum is closest to X using brute force method: "+array[pair1stIndex]+" "+ array[pair2ndIndex]);

	}

}
//--------------------------------------------------------------------------------------------------------------------------------------

	package com.info.learning;
	
	import java.time.LocalDate;
	import java.time.Month;
	import java.util.ArrayList;
	import java.util.Collections;
	import java.util.Comparator;
	
	public class Comparto {
	
		public static void main(String[] args) {
			// TODO Auto-generated method stub
	
			
			ArrayList<Employee> list = new ArrayList<>();
	        
			list.add(new Employee(1l, "Alex", LocalDate.of(2018, Month.APRIL, 21)));
			list.add(new Employee(4l, "Brian", LocalDate.of(2018, Month.APRIL, 01)));
			list.add(new Employee(3l, "Alex", LocalDate.of(2018, Month.APRIL, 25)));
			list.add(new Employee(5l, "Charles", LocalDate.of(2018, Month.APRIL, 23)));
			list.add(new Employee(2l, "Alex", LocalDate.of(2018, Month.APRIL, 30)));
			 
			Collections.sort(list, Comparator
			                        .comparing(Employee::getName)
			                        .thenComparing(Employee::getOf));
			 
			System.out.println(list);
			
		}
	
	}


//--------------------------------------------------------------------------------------------------------------------------------



package com.info.learning;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;

public class FrequencyofRepeatedCharacter {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		String name= "Siddharth";
		
		
		
		char []ch=name.toCharArray();
		
		ArrayList<String> ojlist= new ArrayList<String>();
		
		HashMap<Character,Integer> objhashmap= new LinkedHashMap<Character,Integer>();
		
		for (char c: ch) {
			
			/*if ( name.indexOf(c) == name.lastIndexOf(c)) {
			    System.out.println("First non-repeating character is: "+c);
			    break;
			}*/
			
			if(objhashmap.containsKey(c)) {
			
			objhashmap.put(c, objhashmap.get(c)+1);
			
			}
			
			else {
				
				objhashmap.put(c, 1);
				
			}
			
			
			
		}
		
		//---------------
		
	
		
		
		
		

	}

}


//--------------------------------------------------------------------------------------------------------------------------

package com.info.learning;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Genaratepalindrome {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(solution(5, 2));
		
		System.out.println(solution(8, 3));
		
		System.out.println(solution(3, 2));
		
		//System.out.println(genPalindrome(5, 2));
	}
	
	
	public static String solution(int a, int b) {
		/*if (a % 2 != 0) {
		    throw new IllegalArgumentException("a must be an even number.");
		}*/
        if (b > 26 || b < 0) {
            throw new IllegalArgumentException("b must be between the random of 0 and 26.");
        }
        Random random = new Random();

        StringBuilder result = new StringBuilder();

        StringBuilder reverse = new StringBuilder();

        List<Integer> distinctChars = new ArrayList<>();

        for (int i = 0; i < b; i++) {
            int distinct;

            while (true) {
                distinct = 'a'+ random.nextInt(26);

                if (distinctChars.contains(distinct)) {
                    continue;
                }
                break;
            }
            distinctChars.add(distinct);
        }
        
        char[] chars = "abcdefghijklmnopqrstuvwxyz".toCharArray();
        Random r = new Random();
        //int ci = r.nextInt(b);
        //result.append(chars[ci]);
		   
        if (a % 2 == 0) {
        for(int i = 0; i < a / 2; i++) {
          //  int letter = distinctChars.get(random.nextInt(distinctChars.size()));
            //Random r = new Random();
            int ci = r.nextInt(b);
            result.append((char) chars[ci]);

            reverse.insert(0, (char) chars[ci]);
        }
        
        return result.toString() + reverse.toString();
        }
        else {
        	
        	
        	for(int i = 0; i < (a-1) / 2; i++) {
                int letter = distinctChars.get(random.nextInt(distinctChars.size()));
        		int ci = r.nextInt(b);
                result.append((char) chars[ci]);

                reverse.insert(0, (char) chars[ci]);
            }
        	
        	
        	return result.toString() +(char) chars[r.nextInt(b)]+ reverse.toString();
        	
        }

       
        
    }
	
	

}


//----------------------------------------------------------------------------------------------------------------------------------



package com.info.learning;

import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Hashap {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		HashMap<String,String> objhashmap= new HashMap<String,String>();
		
		Iterator<String> itr = objhashmap.keySet().iterator();
		
		while(itr.hasNext()) {
			
			
			String objhshkey =itr.next();
			String objhshvalue= objhashmap.get(objhshkey);
			
			
		}
		
	    // ------------------------------------------------------------------------------------------------------------------------
        	
		Map<String, Integer> unsortMap = new HashMap<String, Integer>();
        unsortMap.put("alex", 1);
        unsortMap.put("david", 2);
        unsortMap.put("elle", 3);
        unsortMap.put("charles", 4);
        unsortMap.put("brian", 5);
 
        LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
        unsortMap.entrySet().stream().sorted(Map.Entry.comparingByValue())
                .forEachOrdered(x -> sortedMap.put(x.getKey(), x.getValue()));
         
        System.out.println("Sorted Map   : " + sortedMap);
         
        LinkedHashMap<String, Integer> reverseSortedMap = new LinkedHashMap<>();
        unsortMap.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))
                .forEachOrdered(x -> reverseSortedMap.put(x.getKey(), x.getValue()));
         
        System.out.println("Reverse Sorted Map   : " + reverseSortedMap);
		
       // ------------------------------------------------------------------------------------------------------------------------
        
        String text = "a r b k c d se f g a d f s s f d s ft gh f ws w f v x s g h d h j j k f sd j e wed a d f";
        
        List<String> list = Arrays.asList(text.split(" "));
 
        List<String> list2 = Arrays.asList(String.valueOf(text.toCharArray()));
        
        Set<String> uniqueWords = new HashSet<String>(list);
        for (String word : uniqueWords) {
            System.out.println(word + ": " + Collections.frequency(list, word));
        }
		
	}

}


//---------------------------------------------------------------------------------------------------------------------------


package com.info.learning;

import java.util.Arrays;
import java.util.List;

public class IntersectionOfArrays {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int [] array1= {1,2,3,4,5};
		Integer [] array2= {1,3,5,7};
		
		if(array1.length>array2.length) {
		
			for (int i:array1) {
				
				
				if(Arrays.asList(array2).contains(i)) {
					
					System.out.println(i);
				}
				
			}
			
			
		}
		else {
			
			
			
		}
	}

}


//----------------------------------------------------------------------------------------------------

package com.info.learning;

import java.util.ArrayList;
import java.util.List;

public class MaxiumumValue {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		/*int [] num={1,7,91,12,57};
		int max=num[1];
		for (int i=1;i< num.length;i++) {
			
			if(max<num[i]) {
				
				max=num[i];
			}
			
		}
		
		System.out.println(max);*/

		
		//-----------------------------------------------------------------------
		
	
		
		
	}
	
	
	

}



//--------------------------------------------------------------------------------------------------------------------------------------


package com.info.learning;

public class MissingNumberfromArrayofArithemticprogression {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
int arr[]  = {2, 4, 8, 10, 12, 14};
		
		int sum = 0;
		//int idx = -1;
		for (int i = 0; i < arr.length; i++)
		{
			
			sum += arr[i];
		
		}

		// the total sum of numbers between 1 and arr.length.  --  (n/2  +1) * n/2
		int total = (arr[arr.length-1]/2 + 1) *arr[arr.length-1]/2 ;
				// / 2;
		
		System.out.println(total);

		System.out.println("missing number is: " + (total - sum) );
		
	}

}


//----------------------------------------------------------------------------------------------------------------------



package com.info.learning;



public class Permutations {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String name="abc";
		
		permutation("",name);
		
		
	}
	private static void permutation(String perm, String word) {
		if (word.isEmpty()) {
			
			System.out.println(perm + word);
						//System.err.println(perm + word); 
		} 
		
		else { 
			for (int i = 0; i < word.length(); i++) {
				System.out.println(perm + word.charAt(i));
				
				
				System.out.println(word.substring(0, i) + word.substring(i + 1, word.length()));
				permutation(perm + word.charAt(i), word.substring(0, i) + word.substring(i + 1, word.length()));
				}
			}
		}

}


//--------------------------------------------------------------------------------------------------------------


package com.info.learning;

public class ReverseArraywithoutSpecialCharacters {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String text= "a@b.-d!c";
		
		
		int r= text.length()-1;
		char[] charArray = text.toCharArray();
		int l=0;
		
		char temp;
		
		
		
		while (l< r) {
			
			
			
			
			if(!Character.isAlphabetic(charArray[l])) {
				
				l++;
				
			}
			
			else if(!Character.isAlphabetic(charArray[r])) {
				
				r--;
				
			}
			
			else {
				
				temp= charArray[l];
				
				charArray[l]= charArray[r];
				
				charArray[r]=temp;
				
				l++;
				r--;
				
				
				
			}
			
			
		
			
			
			
			
		}
		
		String revStr = new String(charArray);
		 
        System.out.println("Output string: " + revStr);
		
		
		
		
		
	}

}


//-----------------------------------------------------------------------




package com.info.learning;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;

public class Reversestatement {
	static String temp = null;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String NAME= "Robert jr Downey";
		
		String [] x= NAME.split(" ");
		temp="";
		StringBuffer stg= new StringBuffer();
		
		
		for ( String val:x) {
			
			
			if(val.contains("jr")) {
				
				
				stg.append(val);	
				
				temp = temp +stg.reverse() +" " ;
			}
			
			
			else{temp+= val+ " ";}
			
			
			
			
		}
		
		System.out.println(temp);
		
		
		
		
		
		
		/*String name= "my name is siddharth";
		ArrayList<String> objar= new ArrayList<String>();
	String [] str= {};
	
	
	
		int i;
	
		//System.out.println(name.length());
		for (i=name.length()-1; i>=0;i--) {
			
			
			temp= temp+name.charAt(i);
			
			//System.out.println(temp);
		}
		
		//System.out.println(i);
		System.out.println(temp);
	}*/
		
	}

}


//----------------------------------------------------------------------------------------------------------------------------------------------------------


package com.info.learning;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class RotateArrayByKpositions {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	Integer	Arr[] = {1, 2, 3, 4, 5, 6};
	
	Scanner s = new Scanner(System.in);
	
	
	int n= s.nextInt();
	
	int length= Arr.length;
	
	
	
	ArrayList<Integer> objint=new  ArrayList<Integer>();
	
	for (int i=length-n;i<length;i++ ) {
		
		objint.add(Arr[i]);
		
		
	}
	
	
    for (int i=0;i<length-n;i++ ) {
		
		objint.add(Arr[i]);
		
		
	}
	
	
	
	
	
	
	System.out.println(objint);
		
		
	}

}


//------------------------------------------------------------------------------------------------------------------------------------

package com.info.learning;

import java.util.Scanner;

public class Rotation {

	public static void main(String args[]) {
		
	}

	/* * A method exposed to client to calculate permutation of String in Java. */ 
	
	


	
	 public static void rotation(String[] args) throws Exception { 
		 Scanner scnr = new
	  Scanner(System.in); System.out.println("Please enter original String");
	  String input = scnr.nextLine();
	  System.out.println("Please enter rotation of String"); String rotation =
	  scnr.nextLine(); if (checkRotatation(input, rotation)) {
	  System.out.println(input + " and " + rotation +
	  " are rotation of each other"); } else {
	  System.out.println("Sorry, they are not rotation of another"); }
	  scnr.close(); }
	  
	  /** * This method check is given strings are rotation of each other * @param
	 * original * @param rotation * @return true or false
	 */
	
	 public static boolean checkRotatation(String original, String rotation) { if
	  (original.length() != rotation.length()) { return false; } 
	 String
	  concatenated = original + original;
	  System.out.println("Concanted string is -- " + concatenated);
	  System.out.println(concatenated.indexOf(rotation)); 
	  if(concatenated.indexOf(rotation) != -1) { return true; } return false; }
	 
}


//-------------------------------------------------------------------------------------------------------------------------------------


package com.info.learning;

public class SmallestSum {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

			int n = 6358;
		int k = 1;
		
		System.out.println(maxnumber(n));
		
		//System.out.println(smallestNumber(16));
		
	}
	static int smallestNumber(int N)
	{
		
		//(N % 9 + 1) * Math.pow(10, (N / 9)) - 1;
	    return (int) ((N % 9 + 1) * Math.pow(10, (N / 9)) - 1);
	}
	
	
	 static int maxnumber(int n)
	    {
		 int index = Integer.toString(n).indexOf("5");
		 
		 StringBuilder MyString = new StringBuilder(Integer.toString(n));
		MyString =MyString.deleteCharAt(index);
		//String result = Integer.toString(n).substring(0, index)+ Integer.toString(n).substring(index+1);
		    return Integer.parseInt(MyString.toString());
	    }
	
	 
}


//-------------------------------------------------------------------------------------------


package com.info.learning;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.TreeSet;

public class Sortwithoutfunction {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Integer [] num= {1,3,7,2,6,9,10};
		
		
		ArrayList<Integer> oblist  = new ArrayList<Integer>(Arrays.asList(num));
		
		
		Collections.sort(oblist);
		System.out.println(oblist);
		
		/*
		int temp=0;
		for (int i=0;i<num.length;i++) {
			
			for (int j=i+1;j<num.length;j++) {
				
				if(num[i]>num[j])
				
				{
					
					temp=num[j];
					num[j]=num[i];
					num[i]=temp;
					
					
					
				}
				
				
			}
			
		}*/
		// -------------------------------------------------------------------------------------------
		//System.out.println(num);
		
		Arrays.asList(num).stream().sorted().forEach(System.out::println);;
		
	
		
		
		
		
	}

}


//--------------------------------------------------------------------------------------------------------------------------------------------------






package com.info.learning;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Stream;

public class Stringjoiner {

	
	
	
	    static int getLLessThanN(int number, int digit)
	    {
	        //Converting digit to char
	 
	        char c = Integer.toString(digit).charAt(0);
	 
	        
	        for (int i = number; i > 0; --i)
	        {
	        	System.out.println(Integer.toString(i));
	            if(Integer.toString(i).indexOf(c) == -1)
	            {
	            
	 
	                return i;
	            }
	        }
	 
	        return -1;
	    }
	 
	   
	        
		
	   
	
	
	/**
	 * @param args
	 * @throws SQLException
	 * @throws ClassNotFoundException
	 * @throws IOException 
	 */
		public static void main(String[] args) throws SQLException, ClassNotFoundException, IOException {
			
			Integer [] num1 = {1,2,3,1,4,2,5,7,1,3,5};
			LinkedHashSet<Integer> linkedhashset = new LinkedHashSet<>(Arrays.asList(num1));
			
			System.out.println(linkedhashset);
			
		// TODO Auto-generated method stub
		System.out.println(getLLessThanN(145, 4));
	 
		String input ="siddharth";
		
		 if (input.length() <= 2) {
		       Collections.emptySet();
		    }
		    Set<CharSequence> out = new HashSet<CharSequence>();
		    int length = input.length();
		    for (int i = 1; i <= length; i++) {
		        for (int j = i - 1, k = i; j >= 0 && k < length; j--, k++) {
		            if (input.charAt(j) == input.charAt(k)) {
		                out.add(input.subSequence(j, k + 1));
		            } else {
		                break;
		            }
		        }
		    }
		
		//StringJoiner objs= new StringJoiner("-");
		
		  Set<String> objset= new HashSet<String>(); objset.add("ss");
		  objset.add("dd");
		  
		  objset.forEach(s-> System.out.println(s)) ;
		 
		
		Integer [] num = {1,2,3,1,4,2,5,7,1,3,5};
		Arrays.asList(num).stream().distinct().sorted().forEach(System.out::println);
		//Arrays.asList(num).stream().distinct().forEach(System.out::println);
		//LinkedHashSet<Integer> linkedhashset = new LinkedHashSet<>(Arrays.asList(num));
		
		Path filePath = Paths.get("c:/temp", "data.txt");
		 
		//try-with-resources
		try (Stream<String> lines = Files.lines( filePath )) 
		{
		    lines.forEach(System.out::println);
		} 
		catch (IOException e) 
		{
		    e.printStackTrace();
		}
		
		try (Stream<String> lines = Files.lines(filePath)) {
		lines.filter(s -> s.contains("password")).forEach(System.out::println);
		}
		
		
		//List<String> filteredLines = lines
		        
		         //.collect(Collectors.toList());
		
		
		
		
		Class.forName("com.mysql.jdbc.Driver") ;
		
		Connection conn= DriverManager.getConnection("","","");
		
		Statement objstmt=conn.createStatement();
		
		ResultSet objrs=	objstmt.executeQuery("select * from table1");
		String name =objrs.getString("name");
		
		
		
		//System.out.println(linkedhashset);
		}
		
		
		
		
}


//----------------------------------------------------------------------------------------------------------------------------------------------------
package com.info.learning;

import java.util.HashSet;

public class UniqueCharaterString {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		
		String name= "Siddharth";
		char[]ch=name.toCharArray();
		
		HashSet<String> objset= new HashSet<String>();
		for (char c:ch) {
			
			if(!objset.add(String.valueOf(c))){
				
				System.out.println("has repeating character "+ c );
			}
			
		}
		
		
		
	}

}


//------------------------------------------------------------------------------------------------------------------------------













